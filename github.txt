#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <dirent.h>
#include <unistd.h>

#define MAX_TASKS 100
#define MAX_LENGTH 100

typedef struct {
    int id;
    char name[MAX_LENGTH];
    int priority;
    char status[MAX_LENGTH];
} Task;

Task tasks[MAX_TASKS];
int taskCount = 0;

void addTask() {
    if (taskCount >= MAX_TASKS) {
        printf("Task list is full!\n");
        return;
    }
    tasks[taskCount].id = taskCount + 1;
    printf("Enter task name: ");
    getchar(); // To consume newline character
    fgets(tasks[taskCount].name, MAX_LENGTH, stdin);
    strtok(tasks[taskCount].name, "\n"); // Remove newline character
    printf("Enter task priority (1-5): ");
    scanf("%d", &tasks[taskCount].priority);
    strcpy(tasks[taskCount].status, "Pending");
    taskCount++;
    printf("Task added successfully!\n");
}

void deleteTask() {
    int id;
    printf("Enter task ID to delete: ");
    scanf("%d", &id);
    if (id < 1 || id > taskCount) {
        printf("Invalid Task ID!\n");
        return;
    }
    for (int i = id - 1; i < taskCount - 1; i++) {
        tasks[i] = tasks[i + 1];
        tasks[i].id = i + 1;
    }
    taskCount--;
    printf("Task deleted successfully!\n");
}

void updateTaskStatus() {
    int id;
    printf("Enter task ID to update status: ");
    scanf("%d", &id);
    if (id < 1 || id > taskCount) {
        printf("Invalid Task ID!\n");
        return;
    }
    printf("Enter new status (Pending/In Progress/Completed): ");
    getchar(); // Consume newline
    fgets(tasks[id - 1].status, MAX_LENGTH, stdin);
    strtok(tasks[id - 1].status, "\n"); // Remove newline character
    printf("Task status updated successfully!\n");
}

void searchTask() {
    char keyword[MAX_LENGTH];
    printf("Enter task name keyword to search: ");
    getchar(); // Consume newline
    fgets(keyword, MAX_LENGTH, stdin);
    strtok(keyword, "\n"); // Remove newline character
    printf("\nSearch Results:\n");
    printf("ID\tName\t\tPriority\tStatus\n");
    for (int i = 0; i < taskCount; i++) {
        if (strstr(tasks[i].name, keyword) != NULL) {
            printf("%d\t%s\t\t%d\t%s\n", tasks[i].id, tasks[i].name, tasks[i].priority, tasks[i].status);
        }
    }
}

void displayTasks() {
    if (taskCount == 0) {
        printf("No tasks available.\n");
        return;
    }
    printf("\nTask List:\n");
    printf("ID\tName\t\tPriority\tStatus\n");
    for (int i = 0; i < taskCount; i++) {
        printf("%d\t%s\t\t%d\t%s\n", tasks[i].id, tasks[i].name, tasks[i].priority, tasks[i].status);
    }
}

void listProcesses() {
    DIR *dir;
    struct dirent *entry;

    if ((dir = opendir("/proc")) == NULL) {
        perror("opendir");
        return;
    }

    printf("\nRunning Processes:\n");
    printf("PID\tName\t\tStatus\n");

    while ((entry = readdir(dir)) != NULL) {
        if (isdigit(entry->d_name[0])) { // Check if the name is a PID
            int pid = atoi(entry->d_name);
            char path[MAX_LENGTH];
            snprintf(path, sizeof(path), "/proc/%d/stat", pid);
            FILE *fp = fopen(path, "r");
            if (fp) {
                char name[MAX_LENGTH];
                char state;
                fscanf(fp, "%*d %s %c", name, &state);
                fclose(fp);
                printf("%d\t%s\t\t%c\n", pid, name, state);
            }
        }
    }
    closedir(dir);
}

int main() {
    int choice;
    while (1) {
        printf("\nTask Manager\n");
        printf("1. Add Task\n2. Delete Task\n3. Update Task Status\n4. Search Task\n5. Display Tasks\n6. List Processes\n7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1: addTask();
		 break;